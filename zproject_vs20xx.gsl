#   Generate VC++ project file for project
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("vs2010", "Microsoft Visual Studio 2010")
register_target ("vs2012", "Microsoft Visual Studio 2012")
register_target ("vs2013", "Microsoft Visual Studio 2013")
register_target ("vs2015", "Microsoft Visual Studio 2015")
register_target ("vs2017", "Microsoft Visual Studio 2017")

.macro generate_vs20xx_main (path)
.directory.create (my.path)
.output "$(my.path)/.gitignore"
*.opensdf
*.suo
*.sdf
*.user
*.aps
*.log
*.tlog
ipch/
.terminator="\r\n"
.output "$(my.path)/resource.rc"
// Microsoft Visual C++ generated resource script.
//
#include "resource.h"

#define APSTUDIO_READONLY_SYMBOLS
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 2 resource.
//
#include "winres.h"

/////////////////////////////////////////////////////////////////////////////
#undef APSTUDIO_READONLY_SYMBOLS

/////////////////////////////////////////////////////////////////////////////
// English (United States) resources

#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US

#ifdef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// TEXTINCLUDE
//

1 TEXTINCLUDE
BEGIN
    "resource.h\\0"
END

2 TEXTINCLUDE
BEGIN
    "#include ""winres.h""\\r\\n"
    "\\0"
END

3 TEXTINCLUDE
BEGIN
    "\\r\\n"
    "\\0"
END

#endif    // APSTUDIO_INVOKED

/////////////////////////////////////////////////////////////////////////////
//
// Version
//

VS_VERSION_INFO VERSIONINFO
 FILEVERSION $(->version.major),$(->version.minor),$(->version.patch),0
 PRODUCTVERSION $(->version.major),$(->version.minor),$(->version.patch),0
 FILEFLAGSMASK 0x3fL
#ifdef _DEBUG
 FILEFLAGS 0x1L
#else
 FILEFLAGS 0x0L
#endif
 FILEOS 0x40004L
 FILETYPE 0x7L
 FILESUBTYPE 0x0L
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904b0"
        BEGIN
            VALUE "CompanyName", "The AUTHORS"
            VALUE "FileDescription", "$(project.description:)"
            VALUE "FileVersion", "$(->version.major).$(->version.minor).$(->version.patch).0"
            VALUE "InternalName", "$(project.name:)"
            VALUE "LegalCopyright", "Copyright (c) the Authors"
            VALUE "OriginalFilename", "$(project.libname).dll"
            VALUE "ProductName", "$(project.name:)"
            VALUE "ProductVersion", "$(->version.major).$(->version.minor).$(->version.patch).0"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 1200
    END
END

#endif    // English (United States) resources
/////////////////////////////////////////////////////////////////////////////

#ifndef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 3 resource.
//

/////////////////////////////////////////////////////////////////////////////
#endif    // not APSTUDIO_INVOKED
.output "$(my.path)/resource.h"
//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by resource.rc

// Next default values for new objects
//
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        101
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1001
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
.output "$(my.path)/platform.h"
#error "Run configure.bat to create platform.h"
.output "$(my.path)/configure.bat"
@if "%ECHOON%" == "" (@echo off) else (@echo %ECHOON%)&:: set ECHOON=on if you want to debug this script
$(project.generated_warning_header_for_dot_bat:)
@setlocal
:-  configure.bat creates platform.h and configures the build process
:-  You MUST run this before building via msbuild or VisualStudio.

IF %1.==--help. (
    ECHO Syntax: configure [ switch ]
    ECHO    --help                  show this help
    ECHO    --enable-drafts         from zip package, enables DRAFT API
    ECHO    --disable-drafts        from git repository, disables DRAFT API
.for project.main
    ECHO    --without-$(name)       do not build $(name).exe
.endfor
    GOTO :eof
)
ECHO Configuring $(project.name:)...

:- make sure our directory is builds\\msvc no matter where user is when executing it from
@pushd %~dp0%

ECHO //  Generated by configure.bat> platform.h
ECHO. >> platform.h
ECHO #ifndef __PLATFORM_H_INCLUDED__>> platform.h
ECHO #define __PLATFORM_H_INCLUDED__>> platform.h
ECHO. >> platform.h
ECHO #define $(PROJECT.PREFIX)_HAVE_WINDOWS 1>> platform.h

:-  Check for dependencies
.for project.use
IF EXIST "..\\..\\..\\$(use.project)" (
    ECHO Building with $(use.project)
    ECHO #define HAVE_$(USE.PROJECT) 1>> platform.h
) ELSE (
.   if optional
    ECHO Building without $(use.project)
    ECHO #undef HAVE_$(USE.PROJECT)>> platform.h
.   else
    ECHO Building without $(use.project)
    ECHO $(project.name:) cannot build without $(use.project)
.       if defined (use.repository)
    ECHO Please clone $(use.repository), and then configure ^& build
.       endif
    ECHO TODO: resolve this problem automatically.
    GOTO error
.   endif
)
.endfor

:-  Check if we want to build the draft API
if "%1" == "--enable-drafts" goto :with_draft
if "%1" == "--disable-drafts" goto :no_draft
IF NOT EXIST "..\\..\\.git" GOTO no_draft
:with_draft
    ECHO Building with draft API (stable + legacy + draft API)
    ECHO //  Provide draft classes and methods>>platform.h
    ECHO #define $(PROJECT.PREFIX)_BUILD_DRAFT_API 1>>platform.h
    GOTO end_draft
:no_draft
    ECHO Building without draft API (stable + legacy API)
    ECHO #undef $(PROJECT.PREFIX)_BUILD_DRAFT_API 1>>platform.h
:end_draft
ECHO. >> platform.h
ECHO #endif>> platform.h
goto :done

:done
popd
@endlocal
:: this is how you code a return in a windows batch script... "goto :eof"
:: you see after a "call :label", %0 == ":label" inside :label, until "goto :eof" happens.
@if "%0:~1,1" == ":" @goto :eof
@exit /b 0

:error
call :done
@exit /b 1
.terminator="\n"
.endmacro

.##########################################################################

.macro generate_vs20xx_build (path, level, toolset)
.directory.create ("$(my.path)/$(project.libname)")
.# change terminator for Windows file (CR+LF)
.terminator="\r\n"
.output "$(my.path)/$(project.libname)/$(project.libname).vcxproj"
<?xml version="1.0" encoding="utf-8"?>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Label="Globals">
    <ProjectGuid>{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}</ProjectGuid>
    <ProjectName>$(project.libname)</ProjectName>
    <PlatformToolset>v$(my.toolset)</PlatformToolset>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugDLL|Win32">
      <Configuration>DebugDLL</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDLL|Win32">
      <Configuration>ReleaseDLL</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugDLL|x64">
      <Configuration>DebugDLL</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDLL|x64">
      <Configuration>ReleaseDLL</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLTCG|Win32">
      <Configuration>DebugLTCG</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLTCG|Win32">
      <Configuration>ReleaseLTCG</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLTCG|x64">
      <Configuration>DebugLTCG</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLTCG|x64">
      <Configuration>ReleaseLTCG</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLIB|Win32">
      <Configuration>DebugLIB</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLIB|Win32">
      <Configuration>ReleaseLIB</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLIB|x64">
      <Configuration>DebugLIB</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLIB|x64">
      <Configuration>ReleaseLIB</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Configuration">
    <ConfigurationType Condition="$\(Configuration.IndexOf('DLL')) == -1">StaticLibrary</ConfigurationType>
    <ConfigurationType Condition="$\(Configuration.IndexOf('DLL')) != -1">DynamicLibrary</ConfigurationType>
  </PropertyGroup>
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.Default.props" />
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.props" />
  <ImportGroup Label="PropertySheets">
    <Import Project="$\(ProjectDir)..\\..\\properties\\$\(Configuration).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\Output.props" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
  </ImportGroup>
  <ItemGroup>
    <ClInclude Include="..\\..\\platform.h" />
    <ClInclude Include="..\\..\\resource.h" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\\..\\..\\..\\include\\$(project.prefix)_library.$(project.header_ext)" />
.if file.exists ("include/$(project.prelude)")
    <ClInclude Include="..\\..\\..\\..\\include\\$(project.prelude)" />
.endif
.if count (class, class.name = project.name) = 0
    <ClInclude Include="..\\..\\..\\..\\include\\$(project.header)" />
.endif
.for header where scope = "public"
    <ClInclude Include="..\\..\\..\\..\\include\\$(name:$(project.filename_prettyprint)).$(project.header_ext)" />
.endfor
.for extra
    <ClInclude Include="..\\..\\..\\..\\src\\$(name)" />
.endfor
  </ItemGroup>
  <ItemGroup>
.for class
    <ClCompile Include="..\\..\\..\\..\\src\\$(name:$(project.filename_prettyprint)).c">
      <CompileAs>CompileAsCpp</CompileAs>
    </ClCompile>
.endfor
.if count (class)
    <ClCompile Include="..\\..\\..\\..\\src\\$(project.prefix)_private_selftest.$(project.source_ext)">
      <CompileAs>CompileAsCpp</CompileAs>
    </ClCompile>
.endif
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="..\\..\\resource.rc" />
  </ItemGroup>
  <ItemGroup>
    <None Include="..\\..\\nuget\\package.bat" />
    <None Include="..\\..\\nuget\\package.nuspec" />
    <None Include="..\\..\\nuget\\package.targets" />
    <None Include="..\\..\\nuget\\package.xml" />
  </ItemGroup>
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.targets" />
  <!--
$(project.GENERATED_WARNING_HEADER:)
  -->
</Project>
.output "$(my.path)/$(project.libname)/$(project.libname).vcxproj.filters"
<?xml version="1.0" encoding="utf-8"?>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
.for class
    <ClCompile Include="..\\..\\..\\..\\src\\$(name:$(project.filename_prettyprint)).c">
      <Filter>src</Filter>
    </ClCompile>
.endfor
.if count (class)
    <ClCompile Include="..\\..\\..\\..\\src\\$(project.prefix)_private_selftest.$(project.source_ext)">
      <Filter>src</Filter>
    </ClCompile>
.endif
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\\..\\..\\..\\include\\$(project.prefix)_library.$(project.header_ext)">
      <Filter>include</Filter>
    </ClInclude>
.if file.exists ("include/$(project.prelude)")
    <ClInclude Include="..\\..\\..\\..\\include\\$(project.prelude)">
      <Filter>include</Filter>
    </ClInclude>
.endif
.if count (class, class.name = project.name) = 0
    <ClInclude Include="..\\..\\..\\..\\include\\$(project.header)">
      <Filter>include</Filter>
    </ClInclude>
.endif
.for header where scope = "public"
    <ClInclude Include="..\\..\\..\\..\\include\\$(name:$(project.filename_prettyprint)).$(project.header_ext)">
      <Filter>include</Filter>
    </ClInclude>
.endfor
.for extra
    <ClInclude Include="..\\..\\..\\..\\src\\$(name)">
      <Filter>src</Filter>
    </ClInclude>
.endfor
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\\..\\platform.h">
      <Filter>src\\include</Filter>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\\..\\resource.h">
      <Filter>resource</Filter>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="..\\..\\resource.rc">
      <Filter>resource</Filter>
    </ResourceCompile>
  </ItemGroup>
  <ItemGroup>
    <Filter Include="src">
      <UniqueIdentifier>{48f852d3-9723-4499-bf1a-35c0234b8ba9}</UniqueIdentifier>
    </Filter>
    <Filter Include="include">
      <UniqueIdentifier>{95e5d24a-57a2-429a-a1f1-304165f2e3da}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\include">
      <UniqueIdentifier>{d0c837b5-cb58-4b82-b9bf-38727c7b25bd}</UniqueIdentifier>
    </Filter>
    <Filter Include="resource">
      <UniqueIdentifier>{48e93f8c-156c-4379-a901-4b5ad39a4eac}</UniqueIdentifier>
    </Filter>
    <Filter Include="packaging">
      <UniqueIdentifier>{04a473ca-1d88-4e12-9190-8d9cc20efd74}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <None Include="..\\..\\nuget\\package.bat">
      <Filter>packaging</Filter>
    </None>
    <None Include="..\\..\\nuget\\package.nuspec">
      <Filter>packaging</Filter>
    </None>
    <None Include="..\\..\\nuget\\package.targets">
      <Filter>packaging</Filter>
    </None>
    <None Include="..\\..\\nuget\\package.xml">
      <Filter>packaging</Filter>
    </None>
  </ItemGroup>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
</Project>
.for project.main
.   directory.create ("$(my.path)/$(main.name)")
.   output "$(my.path)/$(main.name)/$(main.name).vcxproj"
<?xml version="1.0" encoding="utf-8"?>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Label="Globals">
    <ProjectGuid>{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}</ProjectGuid>
    <ProjectName>$(main.name)</ProjectName>
    <PlatformToolset>v$(my.toolset)</PlatformToolset>
    <ConfigurationType>Application</ConfigurationType>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugDEXE|Win32">
      <Configuration>DebugDEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDEXE|Win32">
      <Configuration>ReleaseDEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugDEXE|x64">
      <Configuration>DebugDEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDEXE|x64">
      <Configuration>ReleaseDEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLEXE|Win32">
      <Configuration>DebugLEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLEXE|Win32">
      <Configuration>ReleaseLEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLEXE|x64">
      <Configuration>DebugLEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLEXE|x64">
      <Configuration>ReleaseLEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugSEXE|Win32">
      <Configuration>DebugSEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseSEXE|Win32">
      <Configuration>ReleaseSEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugSEXE|x64">
      <Configuration>DebugSEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseSEXE|x64">
      <Configuration>ReleaseSEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Configuration">
    <PlatformToolset>v$(my.toolset)</PlatformToolset>
    <ConfigurationType>Application</ConfigurationType>
  </PropertyGroup>
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.Default.props" />
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.props" />
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='DebugDEXE|Win32'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\DebugDEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='ReleaseDEXE|Win32'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\ReleaseDEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='DebugDEXE|x64'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\DebugDEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='ReleaseDEXE|x64'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\ReleaseDEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='DebugLEXE|Win32'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\DebugLEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='ReleaseLEXE|Win32'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\ReleaseLEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='DebugLEXE|x64'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\DebugLEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='ReleaseLEXE|x64'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\ReleaseLEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='DebugSEXE|Win32'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\DebugSEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='ReleaseSEXE|Win32'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\ReleaseSEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='DebugSEXE|x64'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\DebugSEXE.props" />
  </ImportGroup>
  <ImportGroup Condition="'$\(Configuration)|$\(Platform)'=='ReleaseSEXE|x64'" Label="PropertySheets">
    <Import Project="$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props" Condition="exists('$\(UserRootDir)\\Microsoft.Cpp.$\(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\ReleaseSEXE.props" />
  </ImportGroup>
  <ItemGroup>
    <ClCompile Include="..\\..\\..\\..\\src\\$(main.name).c" />
  </ItemGroup>
    <ItemGroup>
    <ProjectReference Include="..\\$(project.libname)\\$(project.libname).vcxproj">
      <Project>{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}</Project>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.targets" />
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
</Project>
.endfor
.output "$(my.path)/$(project.name:c).sln"
Microsoft Visual Studio Solution File, Format Version $(my.level).00
# $(my.path)
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "$(project.libname)", "$(project.libname)\\$(project.libname).vcxproj", "{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}"
EndProject
.for project.main
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "$(main.name)", "$(main.name)\\$(main.name).vcxproj", "{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}"
EndProject
.endfor
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		DynDebug|Win32 = DynDebug|Win32
		DynDebug|x64 = DynDebug|x64
		DynRelease|Win32 = DynRelease|Win32
		DynRelease|x64 = DynRelease|x64
		LtcgDebug|Win32 = LtcgDebug|Win32
		LtcgDebug|x64 = LtcgDebug|x64
		LtcgRelease|Win32 = LtcgRelease|Win32
		LtcgRelease|x64 = LtcgRelease|x64
		StaticDebug|Win32 = StaticDebug|Win32
		StaticDebug|x64 = StaticDebug|x64
		StaticRelease|Win32 = StaticRelease|Win32
		StaticRelease|x64 = StaticRelease|x64
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.DynDebug|Win32.ActiveCfg = DebugDLL|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.DynDebug|Win32.Build.0 = DebugDLL|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.DynDebug|x64.ActiveCfg = DebugDLL|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.DynDebug|x64.Build.0 = DebugDLL|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.DynRelease|Win32.ActiveCfg = ReleaseDLL|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.DynRelease|Win32.Build.0 = ReleaseDLL|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.DynRelease|x64.ActiveCfg = ReleaseDLL|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.DynRelease|x64.Build.0 = ReleaseDLL|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.LtcgDebug|Win32.ActiveCfg = DebugLTCG|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.LtcgDebug|Win32.Build.0 = DebugLTCG|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.LtcgDebug|x64.ActiveCfg = DebugLTCG|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.LtcgDebug|x64.Build.0 = DebugLTCG|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.LtcgRelease|Win32.ActiveCfg = ReleaseLTCG|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.LtcgRelease|Win32.Build.0 = ReleaseLTCG|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.LtcgRelease|x64.ActiveCfg = ReleaseLTCG|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.LtcgRelease|x64.Build.0 = ReleaseLTCG|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.StaticDebug|Win32.ActiveCfg = DebugLIB|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.StaticDebug|Win32.Build.0 = DebugLIB|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.StaticDebug|x64.ActiveCfg = DebugLIB|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.StaticDebug|x64.Build.0 = DebugLIB|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.StaticRelease|Win32.ActiveCfg = ReleaseLIB|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.StaticRelease|Win32.Build.0 = ReleaseLIB|Win32
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.StaticRelease|x64.ActiveCfg = ReleaseLIB|x64
		{0C4A2E28-8C9E-4B27-85D9-BB679AD84AC7}.StaticRelease|x64.Build.0 = ReleaseLIB|x64
.for project.main
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.DynDebug|Win32.ActiveCfg = DebugDEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.DynDebug|Win32.Build.0 = DebugDEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.DynDebug|x64.ActiveCfg = DebugDEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.DynDebug|x64.Build.0 = DebugDEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.DynRelease|Win32.ActiveCfg = ReleaseDEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.DynRelease|Win32.Build.0 = ReleaseDEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.DynRelease|x64.ActiveCfg = ReleaseDEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.DynRelease|x64.Build.0 = ReleaseDEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.LtcgDebug|Win32.ActiveCfg = DebugLEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.LtcgDebug|Win32.Build.0 = DebugLEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.LtcgDebug|x64.ActiveCfg = DebugLEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.LtcgDebug|x64.Build.0 = DebugLEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.LtcgRelease|Win32.ActiveCfg = ReleaseLEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.LtcgRelease|Win32.Build.0 = ReleaseLEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.LtcgRelease|x64.ActiveCfg = ReleaseLEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.LtcgRelease|x64.Build.0 = ReleaseLEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.StaticDebug|Win32.ActiveCfg = DebugSEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.StaticDebug|Win32.Build.0 = DebugSEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.StaticDebug|x64.ActiveCfg = DebugSEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.StaticDebug|x64.Build.0 = DebugSEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.StaticRelease|Win32.ActiveCfg = ReleaseSEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.StaticRelease|Win32.Build.0 = ReleaseSEXE|Win32
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.StaticRelease|x64.ActiveCfg = ReleaseSEXE|x64
		{A5497C4B-1CD1-4779-9458-$(string.hash(main.name))}.StaticRelease|x64.Build.0 = ReleaseSEXE|x64
.endfor
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
.output "$(my.path)/build.bat"
@if "%ECHOON%" == "" (@echo off) else (@echo %ECHOON%)&:: set ECHOON=on if you want to debug this script
$(project.generated_warning_header_for_dot_bat:)
:: Usage:     build.bat [Clean]
@setlocal

:: make sure our directory is correct for building
@pushd %~dp0%

:: supports passing in Clean as third argument if "make clean" behavior is desired
SET action=Building
SET target=%1
if NOT "%target%" == "" set target=/t:%target%&set action=Cleaning

SET solution=$(project.name:c).sln
SET version=$(my.level)
SET log=build.log
SET tools=Microsoft Visual Studio %version%.0\\VC\\vcvarsall.bat
if "%version%" == "15" SET tools=Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat
SET environment="%programfiles(x86)%\\%tools%"
IF NOT EXIST %environment% SET environment="%programfiles%\\%tools%"
IF NOT EXIST %environment% GOTO no_tools

SET packages=
.for project.use
IF EXIST "..\\..\\..\\..\\$(use.project)\\$(my.path)\\$(use.project).import.props" (
    COPY /Y "..\\..\\..\\..\\$(use.project)\\$(my.path)\\$(use.project).import.props" . > %log%
    IF errorlevel 1 GOTO error
.   if optional
    SET packages=%packages% /p:HAVE_$(USE.PROJECT)=1
    ECHO Building with $(use.project)
.   endif
) ELSE (
.   if optional
    ECHO Building without $(use.project)
.   else
    ECHO Did not find $(use.project), aborting.
.       if defined (use.repository)
    ECHO Please clone from $(use.repository), and then build.
.       endif
    GOTO error
.   endif
)
.endfor

ECHO %action% $(project.name:)... (%packages%)

:: save original path
@set oldpath=%PATH%

:: set correct environment for build target
CALL %environment% x86 >> %log%
@if "%ECHOON%" == "" (@echo off) else (@echo %ECHOON%)&:: set ECHOON=on if you want to debug this script
ECHO Platform=x86

ECHO Configuration=DynDebug
msbuild /m /v:n /p:Configuration=DynDebug /p:Platform=Win32 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=DynRelease
msbuild /m /v:n /p:Configuration=DynRelease /p:Platform=Win32 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=LtcgDebug
msbuild /m /v:n /p:Configuration=LtcgDebug /p:Platform=Win32 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=LtcgRelease
msbuild /m /v:n /p:Configuration=LtcgRelease /p:Platform=Win32 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=StaticDebug
msbuild /m /v:n /p:Configuration=StaticDebug /p:Platform=Win32 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=StaticRelease
msbuild /m /v:n /p:Configuration=StaticRelease /p:Platform=Win32 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error

:: restore original path
@set PATH=%oldpath%

:: set correct environment for build target
CALL %environment% x86_amd64 >> %log%
@if "%ECHOON%" == "" (@echo off) else (@echo %ECHOON%)&:: set ECHOON=on if you want to debug this script
ECHO Platform=x64

ECHO Configuration=DynDebug
msbuild /m /v:n /p:Configuration=DynDebug /p:Platform=x64 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=DynRelease
msbuild /m /v:n /p:Configuration=DynRelease /p:Platform=x64 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=LtcgDebug
msbuild /m /v:n /p:Configuration=LtcgDebug /p:Platform=x64 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=LtcgRelease
msbuild /m /v:n /p:Configuration=LtcgRelease /p:Platform=x64 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=StaticDebug
msbuild /m /v:n /p:Configuration=StaticDebug /p:Platform=x64 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error
ECHO Configuration=StaticRelease
msbuild /m /v:n /p:Configuration=StaticRelease /p:Platform=x64 %packages% %solution% %target% >> %log%
IF errorlevel 1 GOTO error

ECHO %action% complete: %packages% %solution%
GOTO end

:error
ECHO *** ERROR, build terminated early: see %log%
GOTO end

:no_tools
ECHO *** ERROR, build tools not found: %tools%

:end
:: restore original path
if NOT "%oldpath%" == "" @set PATH=%oldpath%
popd
@endlocal
.output "$(my.path)/$(project.libname)/$(project.libname).props"
<?xml version="1.0" encoding="utf-8"?>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Label="Globals">
    <_PropertySheetDisplayName>$(project.name:) Common Settings</_PropertySheetDisplayName>
    <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
    <RunCodeAnalysis>false</RunCodeAnalysis>
  </PropertyGroup>

  <!-- Configuration -->
  <ItemDefinitionGroup>
    <PreBuildEvent>
      <Command>copy "$\(BuildRoot)platform.h" "$\(RepoRoot)include\\"</Command>
    </PreBuildEvent>
    <ClCompile>
      <AdditionalIncludeDirectories>$\(RepoRoot)include\\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <CompileAs>CompileAsCpp</CompileAs>
      <DisableSpecificWarnings>%(DisableSpecificWarnings)</DisableSpecificWarnings>
      <EnablePREfast>false</EnablePREfast>
      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;BASE_THREADSAFE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$\(ConfigurationType)' == 'StaticLibrary'">$(PROJECT.PREFIX)_STATIC;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$\(ConfigurationType)' == 'DynamicLibrary'">$(PROJECT.PREFIX)_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalDependencies>Rpcrt4.lib;Ws2_32.lib;Iphlpapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>

  <!-- Dependencies -->
  <ImportGroup Label="PropertySheets">
.for project.use
    <Import Project="$\(SolutionDir)$(use.project).import.props"\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
 />
.endfor
  </ImportGroup>

  <PropertyGroup Condition="'$\(DefaultLinkage)' == 'dynamic'">
.for project.use
    <Linkage-$(use.project)\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
>dynamic</Linkage-$(use.project)>
.endfor
  </PropertyGroup>

  <PropertyGroup Condition="'$\(DefaultLinkage)' == 'ltcg'">
.for project.use
    <Linkage-$(use.project)\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
>ltcg</Linkage-$(use.project)>
.endfor
  </PropertyGroup>

  <PropertyGroup Condition="'$\(DefaultLinkage)' == 'static'">
.for project.use
    <Linkage-$(use.project)\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
>static</Linkage-$(use.project)>
.endfor
  </PropertyGroup>

  <!-- Messages -->
  <Target Name="CustomInfo" BeforeTargets="PrepareForBuild">
    <Message Text="Will copy $\(BuildRoot)platform.h -&gt; $\(RepoRoot)include\\platform.h" Importance="high"/>
  </Target>

  <Target Name="LinkageInfo" BeforeTargets="PrepareForBuild">
.for project.use
    <Message Text="Linkage-$(use.project): $\(Linkage-$(use.project))" Importance="high"\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
 />
.endfor
  </Target>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
</Project>
.output "$(my.path)/$(project.name:c).import.props"
<?xml version="1.0" encoding="utf-8"?>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Label="Globals">
    <_PropertySheetDisplayName>$(PROJECT.NAME) Import Settings</_PropertySheetDisplayName>
  </PropertyGroup>

  <!-- User Interface -->
  <ItemGroup Label="BuildOptionsExtension">
    <PropertyPageSchema Include="$\(MSBuildThisFileDirectory)$(project.name).import.xml" />
  </ItemGroup>

  <!-- Linkage -->
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalIncludeDirectories>$\(ProjectDir)..\\..\\..\\..\\..\\$(project.name)\\include\\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions Condition="'$\(Linkage-$(project.linkname))' == 'static' Or '$\(Linkage-$(project.linkname))' == 'ltcg'">$(PROJECT.PREFIX)_STATIC;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalDependencies Condition="'$\(Linkage-$(project.linkname))' != ''">$(project.libname).lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories Condition="$\(Configuration.IndexOf('Debug')) != -1">$\(ProjectDir)..\\..\\..\\..\\..\\$(project.name)\\bin\\$\(PlatformName)\\Debug\\$\(PlatformToolset)\\$\(Linkage-$(project.linkname))\\;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalLibraryDirectories Condition="$\(Configuration.IndexOf('Release')) != -1">$\(ProjectDir)..\\..\\..\\..\\..\\$(project.name)\\bin\\$\(PlatformName)\\Release\\$\(PlatformToolset)\\$\(Linkage-$(project.linkname))\\;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
    </Link>
  </ItemDefinitionGroup>

  <!-- Copy -->
  <Target Name="Linkage-$(project.linkname)-dynamic" AfterTargets="AfterBuild" Condition="'$\(Linkage-$(project.linkname))' == 'dynamic'">
    <Copy Condition="$\(Configuration.IndexOf('Debug')) != -1"
          SourceFiles="$\(ProjectDir)..\\..\\..\\..\\..\\$(project.name)\\bin\\$\(PlatformName)\\Debug\\$\(PlatformToolset)\\dynamic\\$(project.libname).dll"
          DestinationFiles="$\(TargetDir)$(project.libname).dll"
          SkipUnchangedFiles="true" />
    <Copy Condition="$\(Configuration.IndexOf('Debug')) != -1"
          SourceFiles="$\(ProjectDir)..\\..\\..\\..\\..\\$(project.name)\\bin\\$\(PlatformName)\\Debug\\$\(PlatformToolset)\\dynamic\\$(project.libname).pdb"
          DestinationFiles="$\(TargetDir)$(project.libname).pdb"
          SkipUnchangedFiles="true" />
    <Copy Condition="$\(Configuration.IndexOf('Release')) != -1"
          SourceFiles="$\(ProjectDir)..\\..\\..\\..\\..\\$(project.name)\\bin\\$\(PlatformName)\\Release\\$\(PlatformToolset)\\dynamic\\$(project.libname).dll"
          DestinationFiles="$\(TargetDir)$(project.libname).dll"
          SkipUnchangedFiles="true" />
  </Target>

  <!-- Messages -->
  <Target Name="$(project.name)-info" BeforeTargets="AfterBuild" Condition="'$\(Linkage-$(project.linkname))' == 'dynamic'">
    <Message Text="Copying $(project.libname).dll -&gt; $\(TargetDir)$(project.libname).dll" Importance="high"/>
    <Message Text="Copying $(project.libname).pdb -&gt; $\(TargetDir)$(project.libname).pdb" Importance="high" Condition="$\(Configuration.IndexOf('Debug')) != -1" />
  </Target>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
</Project>
.output "$(my.path)/$(project.libname)/$(project.libname).import.xml"
<?xml version="1.0" encoding="utf-8"?>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
<ProjectSchemaDefinitions xmlns="clr-namespace:Microsoft.Build.Framework.XamlTypes;assembly=Microsoft.Build.Framework">
  <Rule Name="$(project.linkname)-linkage-uiextension" PageTemplate="tool" DisplayName="Local Dependencies" SwitchPrefix="/" Order="1">
    <Rule.Categories>
      <Category Name="$(project.libname)" DisplayName="$(project.name:)" />
    </Rule.Categories>
    <Rule.DataSource>
      <DataSource Persistence="ProjectFile" ItemType="" />
    </Rule.DataSource>
    <EnumProperty Name="Linkage-$(project.linkname)" DisplayName="Linkage" Description="How $(project.name:) will be linked into the output of this project" Category="$(project.linkname)">
      <EnumValue Name="" DisplayName="Not linked" />
      <EnumValue Name="dynamic" DisplayName="Dynamic (DLL)" />
      <EnumValue Name="static" DisplayName="Static (LIB)" />
      <EnumValue Name="ltcg" DisplayName="Static using link time compile generation (LTCG)" />
    </EnumProperty>
  </Rule>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
</ProjectSchemaDefinitions>
.for project.main
.   output "$(my.path)/$(main.name)/$(main.name).props"
<?xml version="1.0" encoding="utf-8"?>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Label="Globals">
    <_PropertySheetDisplayName>$(project.name:) Self Test Common Settings</_PropertySheetDisplayName>
    <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
    <RunCodeAnalysis>false</RunCodeAnalysis>
  </PropertyGroup>

  <!-- Configuration -->
  <ItemDefinitionGroup>
    <ClCompile>
      <DisableSpecificWarnings>%(DisableSpecificWarnings)</DisableSpecificWarnings>
      <EnablePREfast>false</EnablePREfast>
      <PreprocessorDefinitions>%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalDependencies>Iphlpapi.lib;Rpcrt4.lib;Ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>

  <!-- Dependencies -->
  <ImportGroup Label="PropertySheets">
    <Import Project="$\(SolutionDir)$(project.name:c).import.props" />
.for project.use
    <Import Project="$\(SolutionDir)$(use.project).import.props"\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
 />
.endfor
  </ImportGroup>

  <PropertyGroup Condition="$\(Configuration.IndexOf('DEXE')) != -1">
    <Linkage-$(project.prefix)>dynamic</Linkage-$(project.prefix)>
.for project.use
    <Linkage-$(use.project)\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
>dynamic</Linkage-$(use.project)>
.endfor
  </PropertyGroup>

  <PropertyGroup Condition="$\(Configuration.IndexOf('LEXE')) != -1">
    <Linkage-$(project.prefix)>ltcg</Linkage-$(project.prefix)>
.for project.use
    <Linkage-$(use.project)\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
>ltcg</Linkage-$(use.project)>
.endfor
  </PropertyGroup>

  <PropertyGroup Condition="$\(Configuration.IndexOf('SEXE')) != -1">
    <Linkage-$(project.prefix)>static</Linkage-$(project.prefix)>
.for project.use
    <Linkage-$(use.project)\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
>static</Linkage-$(use.project)>
.endfor
  </PropertyGroup>

  <!-- Messages -->
  <Target Name="LinkageInfo" BeforeTargets="PrepareForBuild">
    <Message Text="Linkage-$(project.prefix): $\(Linkage-$(project.prefix))" Importance="high"/>
.for project.use
    <Message Text="Linkage-$(use.project): $\(Linkage-$(use.project))" Importance="high"\
.   if optional
 Condition="'$\(HAVE_$(USE.PROJECT))'=='1'"\
.   endif
 />
.endfor
  </Target>
<!--
$(project.GENERATED_WARNING_HEADER:)
-->
</Project>
.endfor
.terminator="\n"
.endmacro

function target_vs2010
    generate_vs20xx_main ("builds/msvc")
    generate_vs20xx_props ("builds/msvc/properties")
    generate_vs20xx_build ("builds/msvc/vs2010", "10", "100")
endfunction

function target_vs2012
    generate_vs20xx_main ("builds/msvc")
    generate_vs20xx_props ("builds/msvc/properties")
    generate_vs20xx_build ("builds/msvc/vs2012", "11", "110")
endfunction

function target_vs2013
    generate_vs20xx_main ("builds/msvc")
    generate_vs20xx_props ("builds/msvc/properties")
    generate_vs20xx_build ("builds/msvc/vs2013", "12", "120")
endfunction

function target_vs2015
    generate_vs20xx_main ("builds/msvc")
    generate_vs20xx_props ("builds/msvc/properties")
    generate_vs20xx_build ("builds/msvc/vs2015", "14", "140")
endfunction

function target_vs2017
    generate_vs20xx_main ("builds/msvc")
    generate_vs20xx_props ("builds/msvc/properties")
    generate_vs20xx_build ("builds/msvc/vs2017", "15", "141")
endfunction
